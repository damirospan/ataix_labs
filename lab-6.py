import requests
import json
import time

API_KEY = ""
BASE_URL = "https://api.ataix.kz"

HEADERS = {
    "X-API-Key": API_KEY,
    "Content-Type": "application/json"
}

ORDERS_FILE = "orders.json"


def round_to_step(value, step):
    return round(round(value / step) * step, 6)


def load_orders():
    with open(ORDERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_orders(orders):
    with open(ORDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(orders, f, indent=4, ensure_ascii=False)


def check_order_status(order_id):
    url = f"{BASE_URL}/api/orders/{order_id}"
    response = requests.get(url, headers=HEADERS)
    data = response.json()

    if not data.get("status", False):
        print(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: {data.get('message')}")
        return None

    return data.get("result", {}).get("status", "unknown").lower()


def delete_order(order_id):
    url = f"{BASE_URL}/api/orders/{order_id}"
    response = requests.delete(url, headers=HEADERS)
    data = response.json()
    return data.get("status", False)


def create_order(symbol, price, quantity):
    url = f"{BASE_URL}/api/orders"
    payload = {
        "symbol": symbol,
        "side": "buy",
        "type": "limit",
        "quantity": round(quantity, 8),
        "price": round(price, 6)
    }

    response = requests.post(url, headers=HEADERS, json=payload)
    data = response.json()

    print(f"üì¶ –û—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:\n{json.dumps(data, indent=4)}")

    if data.get("status", False):
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:\n{json.dumps(data, indent=4)}")
        return None


def main():
    orders = load_orders()
    updated_orders = []

    for order in orders:
        order_id = order["id"]
        status = check_order_status(order_id)
        time.sleep(0.5)

        if status == "filled":
            print(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –∏—Å–ø–æ–ª–Ω–µ–Ω.")
            order["status"] = "filled"
            updated_orders.append(order)

        elif status == "new":
            print(f"üïí –û—Ä–¥–µ—Ä {order_id} –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω. –£–¥–∞–ª—è–µ–º...")

            if delete_order(order_id):
                order["status"] = "cancelled"
                print(f"üóëÔ∏è –û—Ä–¥–µ—Ä {order_id} —É–¥–∞–ª—ë–Ω.")

                new_price = round_to_step(order["price"] * 1.01, 0.001)
                new_order = create_order(order["symbol"], new_price, order["amount"])

                if new_order:
                    new_order_id = (
                        new_order.get("result", {}).get("orderID") or
                        new_order.get("orderID") or
                        "unknown"
                    )

                    new_entry = {
                        "id": new_order_id,
                        "symbol": order["symbol"],
                        "price": new_price,
                        "amount": order["amount"],
                        "status": "NEW"
                    }

                    updated_orders.append(new_entry)
                    print(f"üîÅ –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –ø–æ —Ü–µ–Ω–µ {new_price}")
                else:
                    print("‚ö†Ô∏è –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä {order_id}")
                updated_orders.append(order)

        else:
            print(f"üü° –û—Ä–¥–µ—Ä {order_id} –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
            updated_orders.append(order)

    save_orders(updated_orders)
    print("\nüìù –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π orders.json —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


if __name__ == "__main__":
    main()
