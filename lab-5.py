import requests
import json

API_KEY = ""
BASE_URL = "https://api.ataix.kz"

HEADERS = {
    "X-API-Key": API_KEY,
    "Content-Type": "application/json"
}

FIXED_BASE = "IMX"
QUOTE = "USDT"
MAX_DEVIATION = 0.05  
def get_balance():
    url = f"{BASE_URL}/api/user/balances"
    response = requests.get(url, headers=HEADERS)

    try:
        data = response.json()
    except Exception as e:
        print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: {e}")
        print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç API:")
        print(response.text)
        raise Exception("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª JSON")

    print("üì¶ DEBUG balance response:", json.dumps(data, indent=4))

    try:
        # –ó–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É
        balance_str = data.get("result", {}).get("available", {}).get("USDT", "0.0")
        balance = float(balance_str)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {balance}")
        return balance
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", e)

    raise Exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT")

def get_symbols():
    url = f"{BASE_URL}/api/symbols"
    response = requests.get(url, headers=HEADERS)
    data = response.json()
    symbols = data.get("result", [])
    
    if not symbols:
        print("‚ùå symbols –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–≤–µ—Ç:")
        print(json.dumps(data, indent=4))
    
    return symbols

def find_imx_pair(symbols):
    print("üîç –ò—â–µ–º –ø–∞—Ä—É IMX/USDT...")
    for s in symbols:
        if s.get("base", "").upper() == FIXED_BASE and s.get("quote", "").upper() == QUOTE:
            symbol = s["symbol"]
            min_amount = float(s.get("minTradeSize", 0.01))
            price_to_compare = float(s.get("ask", 0) or s.get("priceToCompare", 0))
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞: {symbol}, minTradeSize = {min_amount}, ask = {price_to_compare}")
            return symbol, min_amount, price_to_compare
    raise Exception("‚ùå –ü–∞—Ä–∞ IMX/USDT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def round_to_step(value, step):
    return round(round(value / step) * step, 6)

def create_order(symbol, price, quantity):
    url = f"{BASE_URL}/api/orders"
    payload = {
        "symbol": symbol,
        "side": "buy",
        "type": "limit",
        "quantity": round(quantity, 8),
        "price": round(price, 6)
    }

    response = requests.post(url, headers=HEADERS, json=payload)
    data = response.json()

    print(f"üì¶ –û—Ç–≤–µ—Ç –æ—Ç –±–∏—Ä–∂–∏:\n{json.dumps(data, indent=4)}")

    if not data.get("status", False):
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:\n{json.dumps(data, indent=2)}")

    return data

def main():
    balance = get_balance()
    symbols = get_symbols()
    if not symbols:
        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤")

    symbol, min_amount, best_price = find_imx_pair(symbols)
    print(f"üìä –†–∞—Å—á—ë—Ç –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç —Ü–µ–Ω—ã: {best_price}")
    
    percent_list = [0.02, 0.05, 0.08]
    orders = []
    created_total = 0

    for percent in percent_list:
        raw_price = best_price * (1 - percent)
        price = round_to_step(raw_price, 0.001)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ¬±5%
        min_allowed = round_to_step(best_price * (1 - MAX_DEVIATION), 0.001)
        if price < min_allowed:
            print(f"‚ö†Ô∏è –¶–µ–Ω–∞ {price:.6f} –Ω–∏–∂–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞ {min_allowed:.6f}, –∑–∞–º–µ–Ω–µ–Ω–∞.")
            price = min_allowed

        cost = price * min_amount
        if created_total + cost > balance:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –ø–æ —Ü–µ–Ω–µ {price:.6f}")
            break

        response_data = create_order(symbol, price, min_amount)
        order_id = (
            response_data.get("result", {}).get("orderID") or
            response_data.get("result", {}).get("id") or
            response_data.get("id") or
            response_data.get("orderId") or
            "unknown"
        )

        orders.append({
            "id": order_id,
            "symbol": symbol,
            "price": price,
            "amount": min_amount,
            "status": "NEW"
        })
        created_total += cost

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, indent=4, ensure_ascii=False)

    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ orders.json")

if __name__ == "__main__":
    main()
